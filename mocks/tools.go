// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	tools "github.com/charmbracelet/crush/internal/llm/tools"
	mock "github.com/stretchr/testify/mock"
)

// MockBaseTool is an autogenerated mock type for the BaseTool type
type MockBaseTool struct {
	mock.Mock
}

type MockBaseTool_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBaseTool) EXPECT() *MockBaseTool_Expecter {
	return &MockBaseTool_Expecter{mock: &_m.Mock}
}

// Info provides a mock function with no fields
func (_m *MockBaseTool) Info() tools.ToolInfo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 tools.ToolInfo
	if rf, ok := ret.Get(0).(func() tools.ToolInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(tools.ToolInfo)
	}

	return r0
}

// MockBaseTool_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockBaseTool_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
func (_e *MockBaseTool_Expecter) Info() *MockBaseTool_Info_Call {
	return &MockBaseTool_Info_Call{Call: _e.mock.On("Info")}
}

func (_c *MockBaseTool_Info_Call) Run(run func()) *MockBaseTool_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBaseTool_Info_Call) Return(_a0 tools.ToolInfo) *MockBaseTool_Info_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseTool_Info_Call) RunAndReturn(run func() tools.ToolInfo) *MockBaseTool_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockBaseTool) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockBaseTool_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockBaseTool_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockBaseTool_Expecter) Name() *MockBaseTool_Name_Call {
	return &MockBaseTool_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockBaseTool_Name_Call) Run(run func()) *MockBaseTool_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBaseTool_Name_Call) Return(_a0 string) *MockBaseTool_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBaseTool_Name_Call) RunAndReturn(run func() string) *MockBaseTool_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx, params
func (_m *MockBaseTool) Run(ctx context.Context, params tools.ToolCall) (tools.ToolResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 tools.ToolResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tools.ToolCall) (tools.ToolResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tools.ToolCall) tools.ToolResponse); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(tools.ToolResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, tools.ToolCall) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBaseTool_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockBaseTool_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - params tools.ToolCall
func (_e *MockBaseTool_Expecter) Run(ctx interface{}, params interface{}) *MockBaseTool_Run_Call {
	return &MockBaseTool_Run_Call{Call: _e.mock.On("Run", ctx, params)}
}

func (_c *MockBaseTool_Run_Call) Run(run func(ctx context.Context, params tools.ToolCall)) *MockBaseTool_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(tools.ToolCall))
	})
	return _c
}

func (_c *MockBaseTool_Run_Call) Return(_a0 tools.ToolResponse, _a1 error) *MockBaseTool_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBaseTool_Run_Call) RunAndReturn(run func(context.Context, tools.ToolCall) (tools.ToolResponse, error)) *MockBaseTool_Run_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBaseTool creates a new instance of MockBaseTool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBaseTool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBaseTool {
	mock := &MockBaseTool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
