// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	pubsub "github.com/charmbracelet/crush/internal/pubsub"
	mock "github.com/stretchr/testify/mock"

	session "github.com/charmbracelet/crush/internal/session"
)

// MockSessionService is an autogenerated mock type for the Service type
type MockSessionService struct {
	mock.Mock
}

type MockSessionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionService) EXPECT() *MockSessionService_Expecter {
	return &MockSessionService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, title
func (_m *MockSessionService) Create(ctx context.Context, title string) (session.Session, error) {
	ret := _m.Called(ctx, title)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (session.Session, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) session.Session); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(session.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - title string
func (_e *MockSessionService_Expecter) Create(ctx interface{}, title interface{}) *MockSessionService_Create_Call {
	return &MockSessionService_Create_Call{Call: _e.mock.On("Create", ctx, title)}
}

func (_c *MockSessionService_Create_Call) Run(run func(ctx context.Context, title string)) *MockSessionService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionService_Create_Call) Return(_a0 session.Session, _a1 error) *MockSessionService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionService_Create_Call) RunAndReturn(run func(context.Context, string) (session.Session, error)) *MockSessionService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTaskSession provides a mock function with given fields: ctx, toolCallID, parentSessionID, title
func (_m *MockSessionService) CreateTaskSession(ctx context.Context, toolCallID string, parentSessionID string, title string) (session.Session, error) {
	ret := _m.Called(ctx, toolCallID, parentSessionID, title)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskSession")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (session.Session, error)); ok {
		return rf(ctx, toolCallID, parentSessionID, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) session.Session); ok {
		r0 = rf(ctx, toolCallID, parentSessionID, title)
	} else {
		r0 = ret.Get(0).(session.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, toolCallID, parentSessionID, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionService_CreateTaskSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskSession'
type MockSessionService_CreateTaskSession_Call struct {
	*mock.Call
}

// CreateTaskSession is a helper method to define mock.On call
//   - ctx context.Context
//   - toolCallID string
//   - parentSessionID string
//   - title string
func (_e *MockSessionService_Expecter) CreateTaskSession(ctx interface{}, toolCallID interface{}, parentSessionID interface{}, title interface{}) *MockSessionService_CreateTaskSession_Call {
	return &MockSessionService_CreateTaskSession_Call{Call: _e.mock.On("CreateTaskSession", ctx, toolCallID, parentSessionID, title)}
}

func (_c *MockSessionService_CreateTaskSession_Call) Run(run func(ctx context.Context, toolCallID string, parentSessionID string, title string)) *MockSessionService_CreateTaskSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockSessionService_CreateTaskSession_Call) Return(_a0 session.Session, _a1 error) *MockSessionService_CreateTaskSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionService_CreateTaskSession_Call) RunAndReturn(run func(context.Context, string, string, string) (session.Session, error)) *MockSessionService_CreateTaskSession_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTitleSession provides a mock function with given fields: ctx, parentSessionID
func (_m *MockSessionService) CreateTitleSession(ctx context.Context, parentSessionID string) (session.Session, error) {
	ret := _m.Called(ctx, parentSessionID)

	if len(ret) == 0 {
		panic("no return value specified for CreateTitleSession")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (session.Session, error)); ok {
		return rf(ctx, parentSessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) session.Session); ok {
		r0 = rf(ctx, parentSessionID)
	} else {
		r0 = ret.Get(0).(session.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, parentSessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionService_CreateTitleSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTitleSession'
type MockSessionService_CreateTitleSession_Call struct {
	*mock.Call
}

// CreateTitleSession is a helper method to define mock.On call
//   - ctx context.Context
//   - parentSessionID string
func (_e *MockSessionService_Expecter) CreateTitleSession(ctx interface{}, parentSessionID interface{}) *MockSessionService_CreateTitleSession_Call {
	return &MockSessionService_CreateTitleSession_Call{Call: _e.mock.On("CreateTitleSession", ctx, parentSessionID)}
}

func (_c *MockSessionService_CreateTitleSession_Call) Run(run func(ctx context.Context, parentSessionID string)) *MockSessionService_CreateTitleSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionService_CreateTitleSession_Call) Return(_a0 session.Session, _a1 error) *MockSessionService_CreateTitleSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionService_CreateTitleSession_Call) RunAndReturn(run func(context.Context, string) (session.Session, error)) *MockSessionService_CreateTitleSession_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockSessionService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSessionService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSessionService_Expecter) Delete(ctx interface{}, id interface{}) *MockSessionService_Delete_Call {
	return &MockSessionService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSessionService_Delete_Call) Run(run func(ctx context.Context, id string)) *MockSessionService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionService_Delete_Call) Return(_a0 error) *MockSessionService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockSessionService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockSessionService) Get(ctx context.Context, id string) (session.Session, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (session.Session, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) session.Session); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(session.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockSessionService_Expecter) Get(ctx interface{}, id interface{}) *MockSessionService_Get_Call {
	return &MockSessionService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSessionService_Get_Call) Run(run func(ctx context.Context, id string)) *MockSessionService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockSessionService_Get_Call) Return(_a0 session.Session, _a1 error) *MockSessionService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionService_Get_Call) RunAndReturn(run func(context.Context, string) (session.Session, error)) *MockSessionService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockSessionService) List(ctx context.Context) ([]session.Session, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]session.Session, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []session.Session); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]session.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSessionService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessionService_Expecter) List(ctx interface{}) *MockSessionService_List_Call {
	return &MockSessionService_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockSessionService_List_Call) Run(run func(ctx context.Context)) *MockSessionService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSessionService_List_Call) Return(_a0 []session.Session, _a1 error) *MockSessionService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionService_List_Call) RunAndReturn(run func(context.Context) ([]session.Session, error)) *MockSessionService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *MockSessionService) Save(ctx context.Context, _a1 session.Session) (session.Session, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 session.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, session.Session) (session.Session, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, session.Session) session.Session); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(session.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, session.Session) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionService_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockSessionService_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 session.Session
func (_e *MockSessionService_Expecter) Save(ctx interface{}, _a1 interface{}) *MockSessionService_Save_Call {
	return &MockSessionService_Save_Call{Call: _e.mock.On("Save", ctx, _a1)}
}

func (_c *MockSessionService_Save_Call) Run(run func(ctx context.Context, _a1 session.Session)) *MockSessionService_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(session.Session))
	})
	return _c
}

func (_c *MockSessionService_Save_Call) Return(_a0 session.Session, _a1 error) *MockSessionService_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionService_Save_Call) RunAndReturn(run func(context.Context, session.Session) (session.Session, error)) *MockSessionService_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0
func (_m *MockSessionService) Subscribe(_a0 context.Context) <-chan pubsub.Event[session.Session] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan pubsub.Event[session.Session]
	if rf, ok := ret.Get(0).(func(context.Context) <-chan pubsub.Event[session.Session]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan pubsub.Event[session.Session])
		}
	}

	return r0
}

// MockSessionService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockSessionService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSessionService_Expecter) Subscribe(_a0 interface{}) *MockSessionService_Subscribe_Call {
	return &MockSessionService_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0)}
}

func (_c *MockSessionService_Subscribe_Call) Run(run func(_a0 context.Context)) *MockSessionService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSessionService_Subscribe_Call) Return(_a0 <-chan pubsub.Event[session.Session]) *MockSessionService_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSessionService_Subscribe_Call) RunAndReturn(run func(context.Context) <-chan pubsub.Event[session.Session]) *MockSessionService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionService creates a new instance of MockSessionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionService {
	mock := &MockSessionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
