// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	message "github.com/charmbracelet/crush/internal/message"
	mock "github.com/stretchr/testify/mock"

	pubsub "github.com/charmbracelet/crush/internal/pubsub"
)

// MockMessageService is an autogenerated mock type for the Service type
type MockMessageService struct {
	mock.Mock
}

type MockMessageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessageService) EXPECT() *MockMessageService_Expecter {
	return &MockMessageService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, sessionID, params
func (_m *MockMessageService) Create(ctx context.Context, sessionID string, params message.CreateMessageParams) (message.Message, error) {
	ret := _m.Called(ctx, sessionID, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 message.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, message.CreateMessageParams) (message.Message, error)); ok {
		return rf(ctx, sessionID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, message.CreateMessageParams) message.Message); ok {
		r0 = rf(ctx, sessionID, params)
	} else {
		r0 = ret.Get(0).(message.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, message.CreateMessageParams) error); ok {
		r1 = rf(ctx, sessionID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMessageService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
//   - params message.CreateMessageParams
func (_e *MockMessageService_Expecter) Create(ctx interface{}, sessionID interface{}, params interface{}) *MockMessageService_Create_Call {
	return &MockMessageService_Create_Call{Call: _e.mock.On("Create", ctx, sessionID, params)}
}

func (_c *MockMessageService_Create_Call) Run(run func(ctx context.Context, sessionID string, params message.CreateMessageParams)) *MockMessageService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(message.CreateMessageParams))
	})
	return _c
}

func (_c *MockMessageService_Create_Call) Return(_a0 message.Message, _a1 error) *MockMessageService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageService_Create_Call) RunAndReturn(run func(context.Context, string, message.CreateMessageParams) (message.Message, error)) *MockMessageService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockMessageService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMessageService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMessageService_Expecter) Delete(ctx interface{}, id interface{}) *MockMessageService_Delete_Call {
	return &MockMessageService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockMessageService_Delete_Call) Run(run func(ctx context.Context, id string)) *MockMessageService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_Delete_Call) Return(_a0 error) *MockMessageService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockMessageService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSessionMessages provides a mock function with given fields: ctx, sessionID
func (_m *MockMessageService) DeleteSessionMessages(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSessionMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageService_DeleteSessionMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSessionMessages'
type MockMessageService_DeleteSessionMessages_Call struct {
	*mock.Call
}

// DeleteSessionMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockMessageService_Expecter) DeleteSessionMessages(ctx interface{}, sessionID interface{}) *MockMessageService_DeleteSessionMessages_Call {
	return &MockMessageService_DeleteSessionMessages_Call{Call: _e.mock.On("DeleteSessionMessages", ctx, sessionID)}
}

func (_c *MockMessageService_DeleteSessionMessages_Call) Run(run func(ctx context.Context, sessionID string)) *MockMessageService_DeleteSessionMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_DeleteSessionMessages_Call) Return(_a0 error) *MockMessageService_DeleteSessionMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_DeleteSessionMessages_Call) RunAndReturn(run func(context.Context, string) error) *MockMessageService_DeleteSessionMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockMessageService) Get(ctx context.Context, id string) (message.Message, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 message.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (message.Message, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) message.Message); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(message.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMessageService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockMessageService_Expecter) Get(ctx interface{}, id interface{}) *MockMessageService_Get_Call {
	return &MockMessageService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockMessageService_Get_Call) Run(run func(ctx context.Context, id string)) *MockMessageService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_Get_Call) Return(_a0 message.Message, _a1 error) *MockMessageService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageService_Get_Call) RunAndReturn(run func(context.Context, string) (message.Message, error)) *MockMessageService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, sessionID
func (_m *MockMessageService) List(ctx context.Context, sessionID string) ([]message.Message, error) {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []message.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]message.Message, error)); ok {
		return rf(ctx, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []message.Message); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]message.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessageService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMessageService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *MockMessageService_Expecter) List(ctx interface{}, sessionID interface{}) *MockMessageService_List_Call {
	return &MockMessageService_List_Call{Call: _e.mock.On("List", ctx, sessionID)}
}

func (_c *MockMessageService_List_Call) Run(run func(ctx context.Context, sessionID string)) *MockMessageService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMessageService_List_Call) Return(_a0 []message.Message, _a1 error) *MockMessageService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessageService_List_Call) RunAndReturn(run func(context.Context, string) ([]message.Message, error)) *MockMessageService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0
func (_m *MockMessageService) Subscribe(_a0 context.Context) <-chan pubsub.Event[message.Message] {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan pubsub.Event[message.Message]
	if rf, ok := ret.Get(0).(func(context.Context) <-chan pubsub.Event[message.Message]); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan pubsub.Event[message.Message])
		}
	}

	return r0
}

// MockMessageService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockMessageService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockMessageService_Expecter) Subscribe(_a0 interface{}) *MockMessageService_Subscribe_Call {
	return &MockMessageService_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0)}
}

func (_c *MockMessageService_Subscribe_Call) Run(run func(_a0 context.Context)) *MockMessageService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessageService_Subscribe_Call) Return(_a0 <-chan pubsub.Event[message.Message]) *MockMessageService_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_Subscribe_Call) RunAndReturn(run func(context.Context) <-chan pubsub.Event[message.Message]) *MockMessageService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *MockMessageService) Update(ctx context.Context, _a1 message.Message) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, message.Message) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessageService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMessageService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 message.Message
func (_e *MockMessageService_Expecter) Update(ctx interface{}, _a1 interface{}) *MockMessageService_Update_Call {
	return &MockMessageService_Update_Call{Call: _e.mock.On("Update", ctx, _a1)}
}

func (_c *MockMessageService_Update_Call) Run(run func(ctx context.Context, _a1 message.Message)) *MockMessageService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(message.Message))
	})
	return _c
}

func (_c *MockMessageService_Update_Call) Return(_a0 error) *MockMessageService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessageService_Update_Call) RunAndReturn(run func(context.Context, message.Message) error) *MockMessageService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessageService creates a new instance of MockMessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageService {
	mock := &MockMessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
