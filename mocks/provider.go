// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	catwalk "github.com/charmbracelet/catwalk/pkg/catwalk"

	message "github.com/charmbracelet/crush/internal/message"

	mock "github.com/stretchr/testify/mock"

	provider "github.com/charmbracelet/crush/internal/llm/provider"

	tools "github.com/charmbracelet/crush/internal/llm/tools"
)

// MockProvider is an autogenerated mock type for the Provider type
type MockProvider struct {
	mock.Mock
}

type MockProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProvider) EXPECT() *MockProvider_Expecter {
	return &MockProvider_Expecter{mock: &_m.Mock}
}

// Model provides a mock function with no fields
func (_m *MockProvider) Model() catwalk.Model {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Model")
	}

	var r0 catwalk.Model
	if rf, ok := ret.Get(0).(func() catwalk.Model); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(catwalk.Model)
	}

	return r0
}

// MockProvider_Model_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Model'
type MockProvider_Model_Call struct {
	*mock.Call
}

// Model is a helper method to define mock.On call
func (_e *MockProvider_Expecter) Model() *MockProvider_Model_Call {
	return &MockProvider_Model_Call{Call: _e.mock.On("Model")}
}

func (_c *MockProvider_Model_Call) Run(run func()) *MockProvider_Model_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProvider_Model_Call) Return(_a0 catwalk.Model) *MockProvider_Model_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_Model_Call) RunAndReturn(run func() catwalk.Model) *MockProvider_Model_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessages provides a mock function with given fields: ctx, messages, _a2
func (_m *MockProvider) SendMessages(ctx context.Context, messages []message.Message, _a2 []tools.BaseTool) (*provider.ProviderResponse, error) {
	ret := _m.Called(ctx, messages, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SendMessages")
	}

	var r0 *provider.ProviderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []message.Message, []tools.BaseTool) (*provider.ProviderResponse, error)); ok {
		return rf(ctx, messages, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []message.Message, []tools.BaseTool) *provider.ProviderResponse); ok {
		r0 = rf(ctx, messages, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*provider.ProviderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []message.Message, []tools.BaseTool) error); ok {
		r1 = rf(ctx, messages, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProvider_SendMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessages'
type MockProvider_SendMessages_Call struct {
	*mock.Call
}

// SendMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []message.Message
//   - _a2 []tools.BaseTool
func (_e *MockProvider_Expecter) SendMessages(ctx interface{}, messages interface{}, _a2 interface{}) *MockProvider_SendMessages_Call {
	return &MockProvider_SendMessages_Call{Call: _e.mock.On("SendMessages", ctx, messages, _a2)}
}

func (_c *MockProvider_SendMessages_Call) Run(run func(ctx context.Context, messages []message.Message, _a2 []tools.BaseTool)) *MockProvider_SendMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]message.Message), args[2].([]tools.BaseTool))
	})
	return _c
}

func (_c *MockProvider_SendMessages_Call) Return(_a0 *provider.ProviderResponse, _a1 error) *MockProvider_SendMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProvider_SendMessages_Call) RunAndReturn(run func(context.Context, []message.Message, []tools.BaseTool) (*provider.ProviderResponse, error)) *MockProvider_SendMessages_Call {
	_c.Call.Return(run)
	return _c
}

// StreamResponse provides a mock function with given fields: ctx, messages, _a2
func (_m *MockProvider) StreamResponse(ctx context.Context, messages []message.Message, _a2 []tools.BaseTool) <-chan provider.ProviderEvent {
	ret := _m.Called(ctx, messages, _a2)

	if len(ret) == 0 {
		panic("no return value specified for StreamResponse")
	}

	var r0 <-chan provider.ProviderEvent
	if rf, ok := ret.Get(0).(func(context.Context, []message.Message, []tools.BaseTool) <-chan provider.ProviderEvent); ok {
		r0 = rf(ctx, messages, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan provider.ProviderEvent)
		}
	}

	return r0
}

// MockProvider_StreamResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamResponse'
type MockProvider_StreamResponse_Call struct {
	*mock.Call
}

// StreamResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - messages []message.Message
//   - _a2 []tools.BaseTool
func (_e *MockProvider_Expecter) StreamResponse(ctx interface{}, messages interface{}, _a2 interface{}) *MockProvider_StreamResponse_Call {
	return &MockProvider_StreamResponse_Call{Call: _e.mock.On("StreamResponse", ctx, messages, _a2)}
}

func (_c *MockProvider_StreamResponse_Call) Run(run func(ctx context.Context, messages []message.Message, _a2 []tools.BaseTool)) *MockProvider_StreamResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]message.Message), args[2].([]tools.BaseTool))
	})
	return _c
}

func (_c *MockProvider_StreamResponse_Call) Return(_a0 <-chan provider.ProviderEvent) *MockProvider_StreamResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProvider_StreamResponse_Call) RunAndReturn(run func(context.Context, []message.Message, []tools.BaseTool) <-chan provider.ProviderEvent) *MockProvider_StreamResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProvider creates a new instance of MockProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProvider {
	mock := &MockProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
